#!/bin/bash

if [[ -z $DOCKER_PATH ]];then
        DOCKER_PATH='/usr/bin/docker';
fi;

if [[ -z $SAM_DB_LIST ]];then
        SAM_DB_LIST='/var/db/sam/list_installed';
fi;

if [[ -z $BIN_DIR ]]; then
        BIN_DIR='/opt/bin'
fi;

IMAGE='';

#set -xv

## Functions
# Copy META from image
copy_meta_func () {
	# input: $IMAGE $DOCKER_PATH
	TEMPLATE_DIR=`mktemp -d`;
	$DOCKER_PATH run -i -t --rm -v $TEMPLATE_DIR:$TEMPLATE_DIR  --net=host --entrypoint="cp" $IMAGE -r /meta $TEMPLATE_DIR/meta 2>&1 > /dev/null;
	if [[ $? -ne 0 ]]; then
        	echo -e "\E[31mERROR: Directory '/meta' not found in image.">&2;tput sgr0;
		rm -rf $TEMPLATE_DIR;
		exit 1;
	fi;
	# output $pwd $TEMPLATE_DIR
}

# Uninstall image function
uninstall_image_func () {
	echo;	
	echo -e "\E[32mUninstall image $IMAGE.";tput sgr0;
	copy_meta_func;
	pwd=$PWD;
	cd $TEMPLATE_DIR/meta;
        source $TEMPLATE_DIR/meta/uninstall;
	cd $pwd;
        rm -rf $TEMPLATE_DIR;
	echo;
}

# Install image function
install_image_func () {
	echo;
	echo -e "\E[32mInstall image $IMAGE";tput sgr0;
	copy_meta_func;
	pwd=$PWD;
        cd $TEMPLATE_DIR/meta;
	echo;
	source $TEMPLATE_DIR/meta/install;
	cd $pwd;
	rm -rf $TEMPLATE_DIR;
	echo;	
}

# Save image to db function
save_image_to_list_db_func () {
	# Exist image to db
	TEST_EXIST=`echo "$IMAGE" | awk -F ':' 'NF--' | sed "s/ /:/g"`
	TEST_EXIST=`cat $SAM_DB_LIST | grep $TEST_EXIST`;
	if [[ -n $TEST_EXIST ]];then
                echo -e "\E[31mERROR: Image installed in db. ">&2;tput sgr0;
		echo "List exist images: ./sam -l"
		echo;
                exit 1;
        fi;
        echo  "Save image in db.";
	# Collecting info to image
        IMAGE_ID=`$DOCKER_PATH images | grep -v 'REPOSITORY' | awk -F ' ' ' {print $1,$2,$3} ' | sed "s/ /:/g" | grep "$IMAGE" | awk -F ':' '{print $NF}'`
        IMAGE_VERSION=`$DOCKER_PATH images | grep -v 'REPOSITORY' | awk -F ' ' ' {print $1,$2} ' | sed "s/ /:/g" | grep "$IMAGE" | awk -F ':' '{print $NF}'`
        IMAGE_NAME=`$DOCKER_PATH images | grep "$IMAGE_ID" | tail -1 | awk -F ' ' ' {print $1} '`;
        
	# Edit db
	echo -e "$IMAGE_ID\t$IMAGE_NAME\t$IMAGE_VERSION" >> $SAM_DB_LIST;
}

# Delete image to db function
delete_image_to_list_db_func () {
        echo  "Delete image to db.";

        # Edit db
        #set -i "/$IMAGE/d" $SAM_DB_LIST;
	TFILE=`mktemp`;
	cat $SAM_DB_LIST | grep -v "$IMAGE" > $TFILE;
	mv $TFILE $SAM_DB_LIST;
	unset TFILE;
}

# Image latest?
image_latest_func (){
	VERSION_IMAGE=`echo "$IMAGE" | awk -F '/' '{print $NF}' | awk -F ':' '{print $2}'`;
	if [[ -z $VERSION_IMAGE ]];then
                IMAGE="$IMAGE:latest"
        fi;
}

## Commands
# This root?
if [[ $EUID -ne 0 ]]; then
    echo -e "\E[31mThis script must be run as root">&2;tput sgr0;
    exit 1
fi

# Exist BIN_DIR dirrectory ?
if ! [[ -d $BIN_DIR ]]; then
        echo "Create $BIN_DIR.";
        mkdir -p $BIN_DIR;
fi

# Exist BIN_DIR in path ?
TEST_PATH=`echo $PATH | grep $BIN_DIR`;
if [[ -z $TEST_PATH ]]; then
	echo -e "\E[31mERROR: Not found path \"$BIN_DIR\" in environments \$PATH. Add.">&2;tput sgr0;
	exit 1;
fi;

# Exist db?
if ! [[ -f $SAM_DB_LIST ]];then
        echo;
        echo "Not found db sam: $SAM_DB_LIST. Create list."
        echo;
        mkdir -p `echo $SAM_DB_LIST | awk -F '/' 'NF--' | sed 's/ /\//g'`;
        touch $SAM_DB_LIST;
fi;

USAGE="
Options:
	-f  [archive.tar]	Docker load image from tar archive.
	-i  [image]:[version]	Install selected docker image.
	-u  [image]:[version]	Uninstall selected container to db.
	-x  [-f:-i:-u] 		Debug mode from options.
	-I  [image]:[version]	Info to image.
	-c  [image]:[version]	Copy meta image in dirrectory /tmp.
	-l  			List installed image in db.
	-L  [image]		List version to image from Docker Hub.
	-h           		Help.

Environments:
	DOCKER_PATH		Path docker. default: DOCKER_PATH=$DOCKER_PATH
	SAM_DB_LIST		Database from installed images. default: SAM_DB_LIST=$SAM_DB_LIST
	BIN_DIR			Executable file is copied in dirrectory, default: BIN_DIR=$BIN_DIR	
";

while getopts "L:li:f:u:c:xI:h" OPTION
do
    case $OPTION in

	l ) echo;
	    echo "      List images:";
            echo;
            cat $SAM_DB_LIST | awk -F '\t' 'BEGIN {OFS = ":"} {print $2, $3}';
            echo;
	    exit 0
          ;;

	L ) ping -c 1 -n -q registry.hub.docker.com > /dev/null;
	    if [ $? -ne "0" ]; then
		echo -e "\E[31mERROR: Host registry.hub.docker.com is unknown.">&2;tput sgr0;
		exit 1;
	    fi;
	    LIST_VERSIONS=`curl "https://registry.hub.docker.com//v1/repositories/$OPTARG/tags" -f -s | sed 's/,/,\n/g' | grep name | awk -F '"' '{print $4}'`
	    if [ $? -ne "0" ]; then
                echo -e "\E[31mERROR: Image name is unknown.">&2;tput sgr0;
                exit 1;
	    else
		echo;
		echo "      List versions:";
		echo;
		echo "$LIST_VERSIONS" | sed 's/ /\n/g' | sed -e 's#^#'"$OPTARG"':#g';
		echo;
            fi;
	    exit 0
	  ;;

	x ) set -vx
	  ;;

        f ) if [ -f $OPTARG ]; then

                ## Find image name to archive.
		# Find file "repositories"
		tar -xf $OPTARG repositories;
		if [[ $? -ne 0 ]]; then
		    echo -e "\E[31mERROR: File repositories not fount in archive.">&2;tput sgr0;
		    echo "May be incorrectly created archive.";
		    exit 1;
		fi;
		# Correct file "repositories"
                IMAGE=`cat repositories | awk -F '"' ' {print $2,$4} ' | sed "s/ /:/g"`;
		if [[ -z $IMAGE ]]; then
		    echo -e "\E[31mERROR: Incorrect file repositories in archive.">&2;tput sgr0;
		    echo "Not found image name in file.";
		    echo "May be incorrectly created archive.";
		    exit 1;
		fi;
		rm -f repositories;
		##`
		TEST_IMAGE=`cat $SAM_DB_LIST | awk -F '\t' ' {print $2,$3} ' | sed "s/ /:/g" | grep "$IMAGE"`;
           	if [[ -z $TEST_IMAGE ]];then
                	echo "Image not found in db."
			# Load image
			echo "Loading image $IMAGE."
			$DOCKER_PATH load -i $OPTARG
			if [[ $? -ne 0 ]]; then	
			    echo -e "\E[31mERROR: Loading image.">&2;tput sgr0;
			    exit 1;
			fi;
			# Install image
			save_image_to_list_db_func;
			install_image_func;
			echo -e "\E[32mImage installed.";tput sgr0;
		else 
			echo -e "\E[31mERROR: Image exist in db.">&2;tput sgr0;
			exit 1;
	   	fi;
	   else
		echo -e "\E[31m$0: Archive image not defined." >&2;tput sgr0;
		exit 1;
	   fi
	  ;;

	i ) IMAGE=$OPTARG;
	   image_latest_func;
	   # Installed image?
	   TEST_IMAGE=`cat $SAM_DB_LIST | awk -F '\t' ' {print $2,$3} ' | sed "s/ /:/g" | grep "$IMAGE"`;
	   if [[ -n $TEST_IMAGE ]];then
		echo -e "\E[31mERROR: Image found in db. Stop installation.">&2;tput sgr0;
		exit 1;
	   fi;
	   # Exist image?
	   TEST_IMAGE=`$DOCKER_PATH images | grep -v 'REPOSITORY' | awk -F ' ' ' {print $1,$2} ' | sed "s/ /:/g" | grep "$IMAGE"`;
	   if [[ -z $TEST_IMAGE ]];then
                echo -e "\E[31mERROR: Image not found in registry docker. Stop installation.">&2;tput sgr0;
                exit 1;
           fi;
	   # Install image
	   save_image_to_list_db_func;
	   install_image_func;
	   echo -e "\E[32mImage installed.";tput sgr0;
	   exit 0
	  ;;
	
	u ) IMAGE=$OPTARG;
           image_latest_func;
	   # Installed image?
           TEST_IMAGE=`cat $SAM_DB_LIST | awk -F '\t' ' {print $2,$3} ' | sed "s/ /:/g" | grep "$IMAGE"`;
           if [[ -z $TEST_IMAGE ]];then
                echo -e "\E[31mERROR: Image not found in db.">&2;tput sgr0;
                exit 1;
	   else
		IMAGE=`$DOCKER_PATH images | grep -v 'REPOSITORY' | awk -F ' ' ' {print $1,$2,$3} ' | sed "s/ /:/g" | grep "$IMAGE" | awk -F ':' '{print $NF}'`
           fi;
           # Exist image?  
           TEST_IMAGE=`$DOCKER_PATH images | grep -v 'REPOSITORY' | awk -F ' ' ' {print $3} ' | grep "$IMAGE"`;
           if [[ -z $TEST_IMAGE ]];then
                echo -e "\E[31mERROR: Image not found in registry docker.">&2;tput sgr0;
                exit 1;
           fi;
	   # Uninstall image
	   uninstall_image_func;
	   delete_image_to_list_db_func;
           echo -e "\E[32mImage uninstalled.";tput sgr0;
           exit 0
	  ;;
        c ) IMAGE=$OPTARG;
	    image_latest_func;
	    # Exist image?
            TEST_IMAGE=`$DOCKER_PATH images | grep -v 'REPOSITORY' | awk -F ' ' ' {print $1,$2} ' | sed "s/ /:/g" | grep "$IMAGE"`;
            if [[ -z $TEST_IMAGE ]];then
                echo -e "\E[31mERROR: Image not found in registry docker. Stop installation.">&2;tput sgr0;
                exit 1;
            fi;
	    copy_meta_func;
            pwd=$PWD;
	    IMAGE=`echo $IMAGE | sed "s/\//./g"`
	    echo;
	    # Remove exist dirrectory
	    if [[ -d /tmp/meta_$IMAGE ]];then
		echo "Remove old dirrectory."
                rm -r /tmp/meta_$IMAGE;
            fi;
	    mv $TEMPLATE_DIR/meta /tmp/meta_$IMAGE
	    cd $pwd;
	    rm -r $TEMPLATE_DIR;
	    echo "Meta files are moved to a folder /tmp/meta_$IMAGE"
	    echo;
	    exit 0
	   ;;
	    

	I ) IMAGE=$OPTARG;
	    image_latest_func;
	    copy_meta_func;
	    pwd=$PWD;
            cd $TEMPLATE_DIR/meta;
            echo;
	    cat DESCRIPTION;
	    echo;
	    echo "    Time of creation:"
	    cat BUILDSTAMP; 
            cd $pwd;
            rm -rf $TEMPLATE_DIR;
            echo;
	    exit 0
	  ;;

        h ) echo "$USAGE"; 
	    exit 0
          ;;

        *) echo
	  ;;
    esac
done

if [[ -z $IMAGE ]];then 
	IMAGE=$1;
	image_latest_func;
	TEST_IMAGE=`cat $SAM_DB_LIST | awk -F '\t' ' {print $2,$3} ' | sed "s/ /:/g" | grep "$IMAGE"`;
        if [[ -n $TEST_IMAGE ]];then
            echo -e "\E[31mERROR: Image found in db. Stop installation.">&2;tput sgr0;
            exit 1;
        fi;
	# Pull
	$DOCKER_PATH pull $IMAGE;
	if [[ $? -eq 0 ]]; then
		save_image_to_list_db_func;
		install_image_func;
		echo -e "\E[32mImage installed.";tput sgr0;
	else
        	echo -e "\E[31mNot found image \"$1\"." >&2;tput sgr0;
		exit 1;
	fi;
fi;
